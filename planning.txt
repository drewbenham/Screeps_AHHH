============================
SPAWNING LOOP
============================

1. find if we can spawn (energy / already spawning)

2. find what we need to spawn and how many:

2. decide what is the most important to spawn. 
    priority:
        if hostiles present:
            defender
        else if low on resources and there currently is an open mining spot:
            harvester/miner.
        else if 

1: 
    if !spawner.spawning and energy > threshold:

2:
    # of miners = # of open mining spots (open containers)
    
    if # of upgraders < 1:
        needUpgrader = true
    
    if # of constructionsites  < 10 
        builders = 1;
    else 
        builders = # of constructionsites * 0.1 rounded down

    
=============================
CREEP BEST BODIES
=============================
Miner:
    5 work, 1 move
    .83,    0.16

Harvester:
    5 work, 4 carry, 4 move
    .42,    .25,     .33

Builder:
    5 work, 5 carry, 8 move
    .28,    .28,     .44

Repairer:
    3 work, 5 carry, 7 move
    .2,    .33,     .47

Wall Repairer:
    3 work, 2 carry, 4 move
    .33,    .22,     .44

//for each part do this to get the total amount of each part type.
numOfPart = energyTotal / partCost
(.83 * energyTotal) / work 

/*
    This method will spawn pretty much anything you want. You have two options, exact or ratio
    
    Exact: An example of what's in the spawnQueue is my miner code, which in the beginning of a 
           new room builds up the body as the level allows:
    {
        exact: true,
        name: (unique name),
        body: {"work": 1, "carry": 1, "move": 1, "work": 4, "move": 2, "work": 1},
        memory: {role: 'miner', homeRoom: this.room.name, sourceId: opts.sourceId}
    }
    
    Ratio: This will take whatever ratio you give it and figure out the maximum amount your spawn                    
           can make.
           You can specify the maximum size of the creep or not.
           The body will create all the first body parts first, and then the next...like if you have 
           2 carrys and 1 moves in the ratio, it will create all the carrys first and then the moves 
    
        Example: Here is my refill cart spawnQueue code:
    {
        exact: false,
        maxBodyParts: 30,
        body: {"carry": 2, "move": 1},
        name: (unique name),
        memory: {role: 'refillCart', homeRoom: this.room.name, working: false}
    }   
*/

    